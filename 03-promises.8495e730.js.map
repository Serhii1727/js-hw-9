{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,OAAQF,SAASC,cAAc,WAG3BE,EAAwB,WAO5B,MALqB,CACnBC,MAAON,EAAKC,KAAKM,SAASD,MAAME,MAChCC,KAAMT,EAAKC,KAAKM,SAASE,KAAKD,MAC9BE,OAAQV,EAAKC,KAAKM,SAASG,OAAOF,M,EAwBtC,SAASG,EAAcC,EAAUC,GAE/B,IAAMC,EAAgBC,KAAKC,SAAW,GAiBtC,OAfgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACJN,EACLI,EAAQ,CACNN,WACAC,cAGFM,EAAO,CACLP,WACAC,a,GAEFA,E,IAMNb,EAAKC,KAAKoB,iBAAiB,QAAShB,GACpCL,EAAKC,KAAKoB,iBAAiB,UA1CV,SAACC,GAChBA,EAAMC,iBAKN,IAHA,IAAgCC,EAAAnB,IAAxBC,EAAwBkB,EAAxBlB,MAAOG,EAAiBe,EAAjBf,KAAMC,EAAWc,EAAXd,OACjBe,EAAYC,OAAOpB,GAEdqB,EAAI,EAAGA,GAAKjB,EAAQiB,GAAK,EAChCf,SAAWe,EACXhB,EAAcC,SAAUa,GACrBG,MAAK,SAAAC,G,IAAGC,EAAQD,EAARjB,SAAUC,EAASgB,EAAThB,UACjBkB,EAAAjC,GAASkC,OAAOC,QAAQ,uBAAwCC,OAAfJ,EAAS,QAAgBI,OAAVrB,EAAU,M,IAE3EsB,OAAM,SAAAN,G,IAAGC,EAAQD,EAARjB,SAAUC,EAASgB,EAAThB,UAClBkB,EAAAjC,GAASkC,OAAOI,QAAQ,sBAAqCF,OAAfJ,EAAS,QAAgBI,OAAVrB,EAAU,M,IAG3EY,GAAaC,OAAOjB,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst refs = {\n  form: document.querySelector('.form'),\n  button: document.querySelector('button'),\n}\n\nconst createObjectDataInput = () => {\n\n  const objDataInput = {\n    delay: refs.form.elements.delay.value,\n    step: refs.form.elements.step.value,\n    amount: refs.form.elements.amount.value,\n  }\n  return objDataInput;\n}\n\nconst promises = (event) => {\n  event.preventDefault()\n\n  const { delay, step, amount } = createObjectDataInput() \n  let delayTime = Number(delay);\n\n  for (let i = 1; i <= amount; i += 1) {\n    position = i;\n    createPromise(position, delayTime)\n      .then(({ position, delayTime }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delayTime}ms`);\n      })\n      .catch(({ position, delayTime }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delayTime}ms`);\n      });\n    \n    delayTime += Number(step)\n  }}\n\nfunction createPromise(position, delayTime) {\n\n  const shouldResolve = Math.random() > 0.3;\n  \n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n       if (shouldResolve) {\n      resolve({\n        position,\n        delayTime,\n      }) \n  } else {\n      reject({\n        position,\n        delayTime,\n    })\n  }}, delayTime)\n   \n  })\n  return promise;\n}\n\nrefs.form.addEventListener('input', createObjectDataInput)\nrefs.form.addEventListener('submit', promises)"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","button","$ce04d3a99e08e73b$var$createObjectDataInput","delay","elements","value","step","amount","$ce04d3a99e08e73b$var$createPromise","position","delayTime","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","ref","delayTime1","Number","i","then","param","_$position","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.8495e730.js.map"}