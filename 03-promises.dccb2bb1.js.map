{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,OAAQF,SAASC,cAAc,WAGjC,IAAIE,EAAa,KACbC,EAAU,EAEd,MAAMC,EAAwB,KAEhB,CACVC,MAAOR,EAAKC,KAAKQ,SAASD,MAAME,MAChCC,KAAMX,EAAKC,KAAKQ,SAASE,KAAKD,MAC9BE,OAAQZ,EAAKC,KAAKQ,SAASG,OAAOF,QAmCtCV,EAAKC,KAAKY,iBAAiB,QAASN,GACpCP,EAAKC,KAAKY,iBAAiB,UA9BTC,IAChBA,EAAMC,iBACN,MAAQP,MAAAQ,EAAKL,KAAEA,EAAIC,OAAEA,GAAWL,IAIhCF,EAAaY,aAAY,KACvBX,GAAW,EACX,IAAIY,EAAkB,GAwB1B,SAAuBC,EAAUX,GAE/B,MAAMY,EAAgBC,KAAKC,SAAW,GAEhCC,EAAU,IAAIC,SAAQ,CAACC,EAASC,KAChCN,EACFK,EAAQ,C,SACNN,E,MACAX,IAGFkB,EAAO,C,SACPP,E,MAAUX,GACV,IAIJ,OADAmB,QAAQC,IAAIL,GACLA,C,EAtCLM,CAAcjB,EAAQI,GACrBc,MAAK,EAACX,SAAEA,EAAQX,MAAEA,MACnBuB,EAAAjC,GAASkC,OAAOC,QAAQ,uBAAqBd,QAAiBX,MAAU,IAEzE0B,OAAM,EAACf,SAAEA,EAAQX,MAAEA,MAClBuB,EAAAjC,GAASkC,OAAOG,QAAQ,sBAAoBhB,QAAeX,MAAU,IAErEU,GAAmB,EAEhBZ,IAAY8B,OAAOxB,IACpByB,cAAchC,E,GAIfM,EAAK","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst refs = {\n  form: document.querySelector('.form'),\n  button: document.querySelector('button'),\n}\n\nlet intervalId = null;\nlet counter = 0;\n\nconst createObjectDataInput = () => {\n\n  const obj = {\n    delay: refs.form.elements.delay.value,\n    step: refs.form.elements.step.value,\n    amount: refs.form.elements.amount.value,\n  }\n\n  return obj;\n}\n\nconst promises = (event) => {\n  event.preventDefault()\n  const { delay, step, amount } = createObjectDataInput()\n\n\n\n  intervalId = setInterval(() => {\n    counter += 1; \n    let currentPosition = 1;\n\n\n    createPromise(amount, delay)\n    .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    currentPosition += 1;\n    \n    if(counter === Number(amount)) {\n      clearInterval(intervalId)\n      return\n    }\n    \n  }, step);\n\n}\n\nrefs.form.addEventListener('input', createObjectDataInput)\nrefs.form.addEventListener('submit', promises)\n\nfunction createPromise(position, delay) {\n\n  const shouldResolve = Math.random() > 0.3;\n  \n  const promise = new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({\n        position,\n        delay\n    })\n  } else {\n      reject({\n      position, delay\n    })\n  }\n  })\n  console.log(promise)\n  return promise;\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","button","$47d4ff9957288465$var$intervalId","$47d4ff9957288465$var$counter","$47d4ff9957288465$var$createObjectDataInput","delay","elements","value","step","amount","addEventListener","event","preventDefault","delay1","setInterval","currentPosition","position","shouldResolve","Math","random","promise","Promise","resolve","reject","console","log","$47d4ff9957288465$var$createPromise","then","$parcel$interopDefault","Notify","success","catch","failure","Number","clearInterval"],"version":3,"file":"03-promises.dccb2bb1.js.map"}